{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "defaultValue": "D4S-Malware-Quarantine",
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "asia",
        "asiapacific",
        "australia",
        "australiacentral",
        "australiacentral2",
        "australiaeast",
        "australiasoutheast",
        "brazil",
        "brazilsouth",
        "brazilsoutheast",
        "canada",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "centraluseuap",
        "centralusstage",
        "chinaeast",
        "chinanorth",
        "eastasia",
        "eastasiastage",
        "eastus",
        "eastus2",
        "eastus2euap",
        "eastus2stage",
        "eastusstage",
        "europe",
        "francecentral",
        "francesouth",
        "germanycentral",
        "germanynorth",
        "germanynortheast",
        "germanywestcentral",
        "global",
        "india",
        "japan",
        "japaneast",
        "japanwest",
        "jioindiawest",
        "koreacentral",
        "koreasouth",
        "northcentralus",
        "northcentralusstage",
        "northeurope",
        "norwayeast",
        "norwaywest",
        "southafricanorth",
        "southafricawest",
        "southcentralus",
        "southcentralusstage",
        "southeastasia",
        "southeastasiastage",
        "southindia",
        "switzerland",
        "switzerlandnorth",
        "switzerlandwest",
        "uaecentral",
        "uaenorth",
        "uk",
        "uksouth",
        "ukwest",
        "unitedstates",
        "usdodeast",
        "usdodwest",
        "usgovarizona",
        "usgoviowa",
        "usgovtexas",
        "usgovvirginia",
        "usseceast",
        "ussecwest",
        "west",
        "westcentralus",
        "westeurope",
        "westindia",
        "westus",
        "westus2",
        "westus2stage",
        "westus3",
        "westusstage"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "HTTP_Get_Tags_OnTrigger-URI": {
      "type": "string",
      "defaultValue": "@concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', first(skip(split(first(split(variables('blobUrl'), '?')), '/'), 3)), '/', join(skip(split(first(split(variables('blobUrl'), '?')), '/'), 4), '/'), '?comp=tags')"
    },
    "HTTP_Get_Tags_OnTrigger-Audience": {
      "type": "string",
      "defaultValue": "https://storage.azure.com/"
    },
    "HTTP_Get_Tags_Source-URI": {
      "type": "string",
      "defaultValue": "@concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'), '?comp=tags')"
    },
    "HTTP_Get_Tags_Source-Audience": {
      "type": "string",
      "defaultValue": "https://storage.azure.com/"
    },
    "HTTP_Put_Tags_Quarantine-URI": {
      "type": "string",
      "defaultValue": "@concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('qBlobPathFull'), '?comp=tags')"
    },
    "HTTP_Put_Tags_Quarantine-Audience": {
      "type": "string",
      "defaultValue": "https://storage.azure.com/"
    },
    "HTTP_Put_Tags_Source-URI": {
      "type": "string",
      "defaultValue": "@concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'), '?comp=tags')"
    },
    "HTTP_Put_Tags_Source-Audience": {
      "type": "string",
      "defaultValue": "https://storage.azure.com/"
    },
    "LogicAppsCategory_Tag": {
      "type": "string",
      "defaultValue": "security"
    },
    "ascalert-1_name": {
      "type": "string",
      "defaultValue": "ascalert-1"
    },
    "ascalert-1_displayName": {
      "type": "string",
      "defaultValue": "Microsoft Defender for Cloud Alert"
    },
    "azureblob-2_name": {
      "type": "string",
      "defaultValue": "azureblob-2"
    },
    "azureblob-2_displayName": {
      "type": "string",
      "defaultValue": "new_conn_f6c50"
    },
    "office365-1_name": {
      "type": "string",
      "defaultValue": "office365-1"
    },
    "office365-1_displayName": {
      "type": "string",
      "defaultValue": "test@test.com"
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[parameters('logicAppLocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('ascalert-1_name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('azureblob-2_name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('office365-1_name'))]"
      ],
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_an_Microsoft_Defender_for_Cloud_Alert_is_created_or_triggered": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['ascalert-1']['connectionId']"
                  }
                },
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "path": "/Microsoft.Security/Alert/subscribe"
              }
            }
          },
          "actions": {
            "Initialize_Variables": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "blobUrl",
                    "type": "string",
                    "value": "@{coalesce(triggerBody()?['ExtendedProperties']?['Blob URI'], '')}"
                  },
                  {
                    "name": "container",
                    "type": "string"
                  },
                  {
                    "name": "blobPath",
                    "type": "string"
                  },
                  {
                    "name": "blobStorageAccount",
                    "type": "string"
                  },
                  {
                    "name": "qContainer",
                    "type": "string",
                    "value": "quarantine"
                  },
                  {
                    "name": "qStamp",
                    "type": "string",
                    "value": "@{utcNow('yyyyMMddTHHmmssZ')}"
                  },
                  {
                    "name": "qObjectName",
                    "type": "string"
                  },
                  {
                    "name": "qBlobPathFull",
                    "type": "string"
                  },
                  {
                    "name": "notifyEmail",
                    "type": "string",
                    "value": "test@test.com"
                  }
                ]
              }
            },
            "Guard_Skip_If_NoBlobUrl": {
              "actions": {},
              "runAfter": {
                "Initialize_Variables": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Terminate_NoBlob": {
                    "type": "Terminate",
                    "inputs": {
                      "runStatus": "Succeeded"
                    }
                  }
                }
              },
              "expression": "@equals(greater(length(variables('blobUrl')),0), true)",
              "type": "If"
            },
            "HTTP_Get_Tags_OnTrigger": {
              "runAfter": {
                "Guard_Skip_If_NoBlobUrl": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "uri": "[parameters('HTTP_Get_Tags_OnTrigger-URI')]",
                "method": "GET",
                "headers": {
                  "x-ms-version": "2021-12-02"
                },
                "authentication": {
                  "type": "ManagedServiceIdentity",
                  "audience": "[parameters('HTTP_Get_Tags_OnTrigger-Audience')]"
                }
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "TagsXml_Normalized_OnTrigger": {
              "runAfter": {
                "HTTP_Get_Tags_OnTrigger": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@if(and(greater(length(string(body('HTTP_Get_Tags_OnTrigger'))), 0), greaterOrEquals(indexOf(string(body('HTTP_Get_Tags_OnTrigger')), '<Tags>'), 0)), substring(string(body('HTTP_Get_Tags_OnTrigger')), indexOf(string(body('HTTP_Get_Tags_OnTrigger')), '<Tags>'), sub(length(string(body('HTTP_Get_Tags_OnTrigger'))), indexOf(string(body('HTTP_Get_Tags_OnTrigger')), '<Tags>'))), '')"
            },
            "Compose_RestoredAt": {
              "runAfter": {
                "TagsXml_Normalized_OnTrigger": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@if(greater(length(outputs('TagsXml_Normalized_OnTrigger')), 0), xpath(xml(outputs('TagsXml_Normalized_OnTrigger')), 'string(//Tag[Key=\"mdfs-restored-at\"]/Value)'), '')"
            },
            "If_Skip_If_Recently_Restored": {
              "actions": {
                "Terminate_SkipRecentlyRestored": {
                  "type": "Terminate",
                  "inputs": {
                    "runStatus": "Succeeded"
                  }
                }
              },
              "runAfter": {
                "Compose_RestoredAt": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {}
              },
              "expression": "@and(greater(length(outputs('Compose_RestoredAt')), 0), equals(toLower(trim(xpath(xml(outputs('TagsXml_Normalized_OnTrigger')), 'string(//Tag[Key=\"mdfs-restored\"]/Value)'))), 'true'))",
              "type": "If"
            },
            "Guard_Skip_If_Quarantine": {
              "actions": {
                "Terminate_SkipQuarantine": {
                  "type": "Terminate",
                  "inputs": {
                    "runStatus": "Cancelled"
                  }
                }
              },
              "runAfter": {
                "If_Skip_If_Recently_Restored": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "SetVariable_Container": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "container",
                      "value": "@{first(skip(split(first(split(variables('blobUrl'), '?')), '/'), 3))}"
                    }
                  },
                  "SetVariable_BlobPath": {
                    "runAfter": {
                      "SetVariable_Container": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "blobPath",
                      "value": "@{join(skip(split(first(split(variables('blobUrl'), '?')), '/'), 4), '/')}"
                    }
                  },
                  "SetVariable_BlobStorageAccount": {
                    "runAfter": {
                      "SetVariable_BlobPath": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "blobStorageAccount",
                      "value": "@triggerBody()?['ExtendedProperties']?['CompromisedEntity']"
                    }
                  },
                  "Blob_Get_Content_Source": {
                    "runAfter": {
                      "SetVariable_BlobStorageAccount": [
                        "Succeeded"
                      ]
                    },
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azureblob-2']['connectionId']"
                        }
                      },
                      "method": "get",
                      "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(variables('blobStorageAccount')))}/files/@{encodeURIComponent(encodeURIComponent(concat(variables('container'), '/', variables('blobPath'))))}/content",
                      "queries": {
                        "inferContentType": true
                      }
                    }
                  },
                  "HTTP_Get_Tags_Source": {
                    "runAfter": {
                      "Blob_Get_Content_Source": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http",
                    "inputs": {
                      "uri": "[parameters('HTTP_Get_Tags_Source-URI')]",
                      "method": "GET",
                      "headers": {
                        "x-ms-version": "2021-12-02"
                      },
                      "authentication": {
                        "type": "ManagedServiceIdentity",
                        "audience": "[parameters('HTTP_Get_Tags_Source-Audience')]"
                      }
                    },
                    "runtimeConfiguration": {
                      "contentTransfer": {
                        "transferMode": "Chunked"
                      }
                    }
                  },
                  "SourceTags_NoDecl": {
                    "runAfter": {
                      "HTTP_Get_Tags_Source": [
                        "Succeeded"
                      ]
                    },
                    "type": "Compose",
                    "inputs": "@if(and(greater(length(string(body('HTTP_Get_Tags_Source'))), 0), greaterOrEquals(indexOf(string(body('HTTP_Get_Tags_Source')), '<Tags>'), 0)), substring(string(body('HTTP_Get_Tags_Source')), indexOf(string(body('HTTP_Get_Tags_Source')), '<Tags>'), sub(length(string(body('HTTP_Get_Tags_Source'))), indexOf(string(body('HTTP_Get_Tags_Source')), '<Tags>'))), '')"
                  },
                  "ExistingTagSet_Inner": {
                    "runAfter": {
                      "SourceTags_NoDecl": [
                        "Succeeded"
                      ]
                    },
                    "type": "Compose",
                    "inputs": "@if(or(contains(outputs('SourceTags_NoDecl'), '<TagSet/>'), contains(outputs('SourceTags_NoDecl'), '<TagSet />')), '', substring(outputs('SourceTags_NoDecl'), add(indexOf(outputs('SourceTags_NoDecl'), '<TagSet>'), 8), sub(indexOf(outputs('SourceTags_NoDecl'), '</TagSet>'), add(indexOf(outputs('SourceTags_NoDecl'), '<TagSet>'), 8))))"
                  },
                  "TagsXml_ToPut": {
                    "runAfter": {
                      "ExistingTagSet_Inner": [
                        "Succeeded"
                      ]
                    },
                    "type": "Compose",
                    "inputs": "@if(greater(length(outputs('SourceTags_NoDecl')), 0), outputs('SourceTags_NoDecl'), '<Tags><TagSet/></Tags>')"
                  },
                  "SetVariable_QObjectName": {
                    "runAfter": {
                      "TagsXml_ToPut": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "qObjectName",
                      "value": "@{concat(variables('qStamp'), '/', variables('container'), '/', variables('blobPath'))}"
                    }
                  },
                  "SetVariable_QBlobPathFull": {
                    "runAfter": {
                      "SetVariable_QObjectName": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "qBlobPathFull",
                      "value": "@{concat(variables('qContainer'), '/', variables('qObjectName'))}"
                    }
                  },
                  "Blob_Create_Quarantine": {
                    "runAfter": {
                      "SetVariable_QBlobPathFull": [
                        "Succeeded"
                      ]
                    },
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azureblob-2']['connectionId']"
                        }
                      },
                      "method": "post",
                      "body": "@body('Blob_Get_Content_Source')",
                      "headers": {
                        "ReadFileMetadataFromServer": true
                      },
                      "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(variables('blobStorageAccount')))}/files",
                      "queries": {
                        "folderPath": "@{variables('qContainer')}",
                        "name": "@{variables('qObjectName')}",
                        "queryParametersSingleEncoded": true
                      }
                    },
                    "runtimeConfiguration": {
                      "contentTransfer": {
                        "transferMode": "Chunked"
                      }
                    }
                  },
                  "HTTP_Put_Tags_Quarantine": {
                    "runAfter": {
                      "Blob_Create_Quarantine": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http",
                    "inputs": {
                      "uri": "[parameters('HTTP_Put_Tags_Quarantine-URI')]",
                      "method": "PUT",
                      "headers": {
                        "x-ms-version": "2021-12-02",
                        "Content-Type": "application/xml; charset=UTF-8"
                      },
                      "body": "@outputs('TagsXml_ToPut')",
                      "authentication": {
                        "type": "ManagedServiceIdentity",
                        "audience": "[parameters('HTTP_Put_Tags_Quarantine-Audience')]"
                      }
                    },
                    "runtimeConfiguration": {
                      "contentTransfer": {
                        "transferMode": "Chunked"
                      }
                    }
                  },
                  "Blob_Delete_Source": {
                    "runAfter": {
                      "HTTP_Put_Tags_Quarantine": [
                        "Succeeded"
                      ]
                    },
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azureblob-2']['connectionId']"
                        }
                      },
                      "method": "delete",
                      "headers": {
                        "SkipDeleteIfFileNotFoundOnServer": false
                      },
                      "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(variables('blobStorageAccount')))}/files/@{encodeURIComponent(encodeURIComponent(concat(variables('container'), '/', variables('blobPath'))))}"
                    }
                  },
                  "Approval_Send_Email": {
                    "runAfter": {
                      "Blob_Delete_Source": [
                        "Succeeded"
                      ]
                    },
                    "type": "ApiConnectionWebhook",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['office365-1']['connectionId']"
                        }
                      },
                      "body": {
                        "NotificationUrl": "@listCallbackUrl()",
                        "Message": {
                          "To": "@variables('notifyEmail')",
                          "Body": "@concat('Malicious blob quarantined.', decodeUriComponent('%0D%0A%0D%0A'), 'Storage: ', triggerBody()?['ExtendedProperties']?['CompromisedEntity'], decodeUriComponent('%0D%0A%0D%0A'), 'Original: ', variables('container'), '/', variables('blobPath'), decodeUriComponent('%0D%0A%0D%0A'), 'Quarantine: ', variables('qContainer'), '/', variables('qStamp'), '/', variables('container'), '/', variables('blobPath'), decodeUriComponent('%0D%0A%0D%0A'), 'SHA-256: ', coalesce(triggerBody()?['ExtendedProperties']?['SHA-256'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'Type: ', coalesce(triggerBody()?['ExtendedProperties']?['Malware types detected'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'Alert URI: ', coalesce(triggerBody()?['AlertUri'], triggerBody()?['AlertUrl'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'System Alert Id: ', coalesce(triggerBody()?['SystemAlertId'], triggerBody()?['AlertId'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'Resource ID: ', coalesce(triggerBody()?['ExtendedProperties']?['EffectiveAzureResourceId'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'Subscription: ', coalesce(triggerBody()?['ExtendedProperties']?['EffectiveSubscriptionId'], ''), decodeUriComponent('%0D%0A%0D%0A'), 'Choose an option below.')",
                          "Importance": "Normal",
                          "UseOnlyHTMLMessage": false,
                          "HideHTMLMessage": true,
                          "ShowHTMLConfirmationDialog": true,
                          "Subject": "Malware quarantined: @{variables('blobPath')}",
                          "Options": "Keep in Quarantine, Restore to Original"
                        }
                      },
                      "path": "/approvalmail/$subscriptions"
                    }
                  },
                  "If_Approval_Restore": {
                    "actions": {
                      "Blob_Create_Source": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['azureblob-2']['connectionId']"
                            }
                          },
                          "method": "post",
                          "body": "@body('Blob_Get_Content_Source')",
                          "headers": {
                            "ReadFileMetadataFromServer": true
                          },
                          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(variables('blobStorageAccount')))}/files",
                          "queries": {
                            "folderPath": "@variables('container')",
                            "name": "@variables('blobPath')",
                            "queryParametersSingleEncoded": true
                          }
                        },
                        "runtimeConfiguration": {
                          "contentTransfer": {
                            "transferMode": "Chunked"
                          }
                        }
                      },
                      "Blob_Delete_Quarantine": {
                        "runAfter": {
                          "Blob_Create_Source": [
                            "Succeeded"
                          ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['azureblob-2']['connectionId']"
                            }
                          },
                          "method": "delete",
                          "headers": {
                            "SkipDeleteIfFileNotFoundOnServer": false
                          },
                          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(variables('blobStorageAccount')))}/files/@{encodeURIComponent(encodeURIComponent(concat(variables('qContainer'), '/', variables('qObjectName'))))}"
                        }
                      },
                      "TagsXml_For_Source_After_Restore": {
                        "runAfter": {
                          "Blob_Delete_Quarantine": [
                            "Succeeded"
                          ]
                        },
                        "type": "Compose",
                        "inputs": "@concat('<Tags><TagSet>', '<Tag><Key>mdfs-restored</Key><Value>true</Value></Tag>', '<Tag><Key>mdfs-restored-at</Key><Value>', utcNow('o'), '</Value></Tag>', '<Tag><Key>mdfs-restored-by</Key><Value>', coalesce(outputs('Approval_Send_Email')?['UserEmailAddress'],'unknown'), '</Value></Tag>', outputs('ExistingTagSet_Inner'), '</TagSet></Tags>')"
                      },
                      "HTTP_Put_Tags_Source": {
                        "runAfter": {
                          "TagsXml_For_Source_After_Restore": [
                            "Succeeded"
                          ]
                        },
                        "type": "Http",
                        "inputs": {
                          "uri": "[parameters('HTTP_Put_Tags_Source-URI')]",
                          "method": "PUT",
                          "headers": {
                            "x-ms-version": "2021-12-02",
                            "Content-Type": "application/xml; charset=UTF-8"
                          },
                          "body": "@outputs('TagsXml_For_Source_After_Restore')",
                          "authentication": {
                            "type": "ManagedServiceIdentity",
                            "audience": "[parameters('HTTP_Put_Tags_Source-Audience')]"
                          }
                        },
                        "runtimeConfiguration": {
                          "contentTransfer": {
                            "transferMode": "Chunked"
                          }
                        }
                      },
                      "Email_False_Positive_Restored": {
                        "runAfter": {
                          "HTTP_Put_Tags_Source": [
                            "Succeeded"
                          ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['office365-1']['connectionId']"
                            }
                          },
                          "method": "post",
                          "body": {
                            "To": "@variables('notifyEmail')",
                            "Subject": "False Positive Restored: @{variables('blobPath')}",
                            "Body": "<h2 style=\"margin:0 0 8px;\">Decision: <span style=\"color:#2a6\">Restored to original location</span></h2><p style=\"margin:0 0 12px;\">The quarantined blob was copied back to its original path. Note: if on-upload scanning is enabled, this may trigger a new Defender alert.</p><h3 style=\"margin:16px 0 6px;\">Summary</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Workflow run</b></td><td>@{workflow().run.name}</td></tr><tr><td><b>Decision time (UTC)</b></td><td>@{utcNow()}</td></tr><tr><td><b>Approver</b></td><td>@{outputs('Approval_Send_Email')?['UserEmailAddress']}</td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Original blob (restored)</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Storage account</b></td><td>@{triggerBody()?['ExtendedProperties']?['CompromisedEntity']}</td></tr><tr><td><b>Container</b></td><td>@{variables('container')}</td></tr><tr><td><b>Blob name</b></td><td>@{variables('blobPath')}</td></tr><tr><td><b>Original URL</b></td><td style=\"word-break:break-all;\"><a href=\"@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'))}\">@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'))}</a></td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Quarantine blob (source of restore)</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Container</b></td><td>@{variables('qContainer')}</td></tr><tr><td><b>Path</b></td><td>@{variables('qStamp')}/@{variables('container')}/@{variables('blobPath')}</td></tr><tr><td><b>Quarantine URL</b></td><td style=\"word-break:break-all;\"><a href=\"@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('qBlobPathFull'))}\">@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('qBlobPathFull'))}</a></td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Malware details</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Type</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware types detected']}</td></tr><tr><td><b>SHA-256</b></td><td style=\"word-break:break-all;\">@{triggerBody()?['ExtendedProperties']?['SHA-256']}</td></tr><tr><td><b>Blob upload time</b></td><td>@{triggerBody()?['ExtendedProperties']?['Blob upload time']}</td></tr><tr><td><b>Scan time (UTC)</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware Scanning scan time UTC']}</td></tr><tr><td><b>Correlation ID</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware Scanning Correlation ID']}</td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Alert details</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Alert URI</b></td><td style=\"word-break:break-all;\"><a href=\"@{coalesce(triggerBody()?['AlertUri'], triggerBody()?['AlertUrl'], '')}\">@{coalesce(triggerBody()?['AlertUri'], triggerBody()?['AlertUrl'], '')}</a></td></tr><tr><td><b>System Alert Id</b></td><td>@{coalesce(triggerBody()?['SystemAlertId'], triggerBody()?['AlertId'], '')}</td></tr><tr><td><b>Resource ID</b></td><td style=\"word-break:break-all;\">@{triggerBody()?['ExtendedProperties']?['EffectiveAzureResourceId']}</td></tr><tr><td><b>Subscription</b></td><td>@{triggerBody()?['ExtendedProperties']?['EffectiveSubscriptionId']}</td></tr><tr><td><b>Severity</b></td><td>@{triggerBody()?['Severity']}</td></tr><tr><td><b>Alert time (UTC)</b></td><td>@{triggerBody()?['AlertTimeUtc']}</td></tr></tbody></table><p style=\"margin:16px 0 0; font-size:12px; color:#666;\">Note: restoring a quarantined blob to its original location can cause Microsoft Defender for Storage to raise a new alert if on-upload scanning is enabled for that container.</p>",
                            "Importance": "Normal"
                          },
                          "path": "/v2/Mail"
                        }
                      }
                    },
                    "runAfter": {
                      "Approval_Send_Email": [
                        "Succeeded"
                      ]
                    },
                    "else": {
                      "actions": {
                        "Email_File_Remains_Quarantined": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['office365-1']['connectionId']"
                              }
                            },
                            "method": "post",
                            "body": {
                              "To": "@variables('notifyEmail')",
                              "Subject": "Malware Kept in Quarantine: @{variables('blobPath')}",
                              "Body": "<h2 style=\"margin:0 0 8px;\">Decision: <span style=\"color:#b35\">Kept in quarantine</span></h2><p style=\"margin:0 0 12px;\">The quarantined blob will remain in place.</p><h3 style=\"margin:16px 0 6px;\">Summary</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Workflow run</b></td><td>@{workflow().run.name}</td></tr><tr><td><b>Decision time (UTC)</b></td><td>@{utcNow()}</td></tr><tr><td><b>Approver</b></td><td>@{outputs('Approval_Send_Email')?['UserEmailAddress']}</td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Original blob</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Storage account</b></td><td>@{triggerBody()?['ExtendedProperties']?['CompromisedEntity']}</td></tr><tr><td><b>Container</b></td><td>@{variables('container')}</td></tr><tr><td><b>Blob name</b></td><td>@{variables('blobPath')}</td></tr><tr><td><b>Original URL</b></td><td style=\"word-break:break-all;\"><a href=\"@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'))}\">@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('container'), '/', variables('blobPath'))}</a></td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Quarantine blob</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Container</b></td><td>@{variables('qContainer')}</td></tr><tr><td><b>Path</b></td><td>@{variables('qStamp')}/@{variables('container')}/@{variables('blobPath')}</td></tr><tr><td><b>Quarantine URL</b></td><td style=\"word-break:break-all;\"><a href=\"@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('qBlobPathFull'))}\">@{concat('https://', replace(uriHost(variables('blobUrl')), '.dfs.', '.blob.'), '/', variables('qBlobPathFull'))}</a></td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Malware details</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Type</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware types detected']}</td></tr><tr><td><b>SHA-256</b></td><td style=\"word-break:break-all;\">@{triggerBody()?['ExtendedProperties']?['SHA-256']}</td></tr><tr><td><b>Blob upload time</b></td><td>@{triggerBody()?['ExtendedProperties']?['Blob upload time']}</td></tr><tr><td><b>Scan time (UTC)</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware Scanning scan time UTC']}</td></tr><tr><td><b>Correlation ID</b></td><td>@{triggerBody()?['ExtendedProperties']?['Malware Scanning Correlation ID']}</td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Alert details</h3><table cellpadding=\"4\" cellspacing=\"0\" style=\"border-collapse:collapse;\"><tbody><tr><td><b>Alert URI</b></td><td style=\"word-break:break-all;\"><a href=\"@{coalesce(triggerBody()?['AlertUri'], triggerBody()?['AlertUrl'], '')}\">@{coalesce(triggerBody()?['AlertUri'], triggerBody()?['AlertUrl'], '')}</a></td></tr><tr><td><b>System Alert Id</b></td><td>@{coalesce(triggerBody()?['SystemAlertId'], triggerBody()?['AlertId'], '')}</td></tr><tr><td><b>Resource ID</b></td><td style=\"word-break:break-all;\">@{triggerBody()?['ExtendedProperties']?['EffectiveAzureResourceId']}</td></tr><tr><td><b>Subscription</b></td><td>@{triggerBody()?['ExtendedProperties']?['EffectiveSubscriptionId']}</td></tr><tr><td><b>Severity</b></td><td>@{triggerBody()?['Severity']}</td></tr><tr><td><b>Alert time (UTC)</b></td><td>@{triggerBody()?['AlertTimeUtc']}</td></tr></tbody></table><h3 style=\"margin:16px 0 6px;\">Potential causes</h3><p style=\"white-space:pre-line; margin:0;\">@{triggerBody()?['ExtendedProperties']?['Potential Causes']}</p>",
                              "Importance": "Normal"
                            },
                            "path": "/v2/Mail"
                          }
                        }
                      }
                    },
                    "expression": {
                      "and": [
                        {
                          "equals": [
                            "@body('Approval_Send_Email')?['SelectedOption']",
                            "Restore to Original"
                          ]
                        }
                      ]
                    },
                    "type": "If"
                  },
                  "Audit_Approval": {
                    "runAfter": {
                      "Approval_Send_Email": [
                        "Succeeded"
                      ]
                    },
                    "type": "Compose",
                    "inputs": "@concat('{\"selected\":\"', coalesce(outputs('Approval_Send_Email')?['SelectedOption'],''), '\",\"user\":\"', coalesce(outputs('Approval_Send_Email')?['UserEmailAddress'],''), '\",\"tenant\":\"', coalesce(outputs('Approval_Send_Email')?['UserTenantId'],''), '\"}')"
                  }
                }
              },
              "expression": "@and(greater(length(variables('blobUrl')), 0), contains(toLower(first(split(variables('blobUrl'), '?'))), concat('/', toLower(variables('qContainer')), '/')))",
              "type": "If"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "ascalert-1": {
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/ascalert')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('ascalert-1_name'))]",
                "connectionName": "[parameters('ascalert-1_name')]"
              },
              "azureblob-2": {
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azureblob-2_name'))]",
                "connectionName": "[parameters('azureblob-2_name')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "office365-1": {
                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/office365')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('office365-1_name'))]",
                "connectionName": "[parameters('office365-1_name')]"
              }
            }
          }
        }
      },
      "tags": {
        "LogicAppsCategory": "[parameters('LogicAppsCategory_Tag')]"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[parameters('logicAppLocation')]",
      "name": "[parameters('office365-1_name')]",
      "properties": {
        "api": {
          "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/office365')]"
        },
        "displayName": "[parameters('office365-1_displayName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[parameters('logicAppLocation')]",
      "name": "[parameters('azureblob-2_name')]",
      "properties": {
        "api": {
          "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/azureblob')]"
        },
        "displayName": "[parameters('azureblob-2_displayName')]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {}
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[parameters('logicAppLocation')]",
      "name": "[parameters('ascalert-1_name')]",
      "properties": {
        "api": {
          "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',parameters('logicAppLocation'),'/managedApis/ascalert')]"
        },
        "displayName": "[parameters('ascalert-1_displayName')]"
      }
    }
  ],
  "outputs": {}
}
